{"version":3,"sources":["../../src/app.js"],"names":["app","disable","use","json","urlencoded","extended","getRequest","url","params","stringify","then","response","setRawUrl","rawUrl","fieldName","parameters","parentType","parent","variables","Object","keys","forEach","propKey","includes","replace","id","toLowerCase","Error","skip","req","res","statusCode","get","endpointURL","console","log","graphQlSchema","swaggerJson","options","apiResolver","type","result","schema","context","next","err","status","render","message"],"mappings":"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","file":"app.js","sourcesContent":["import express from 'express';\nimport http from 'http';\nimport path from 'path';\nimport logger from 'morgan';\nimport bodyParser from 'body-parser';\nimport fetch from 'isomorphic-fetch';\nimport qs from 'qs';\nimport { graphqlExpress, graphiqlExpress } from 'apollo-server-express';\nimport {\n  addErrorLoggingToSchema,\n  makeExecutableSchema,\n  mergeSchemas,\n} from 'graphql-tools';\nimport { schemaFromMultiple } from 'graphql-schema-from-swagger';\nimport petStoreJson from '../data/petstore.swagger';\n\nconst app = express();\napp.disable('x-powered-by');\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n\nconst getRequest = (url, params) => fetch(`http://petstore.swagger.io/v2${url}?${qs.stringify(params)}`).then(response => response.json());\n\nfunction setRawUrl({\n  rawUrl,\n  fieldName,\n  parameters,\n  parentType,\n  parent,\n}) {\n  var variables = {};\n\n  // Try to set all properties on the parent entity\n  var url = rawUrl;\n  if (parent) {\n    Object.keys(parent).forEach(propKey => {\n      if (rawUrl.includes(`{${propKey}}`) && propKey !== 'id') {\n        variables[propKey] = parent[propKey];\n        url = url.replace(`{${propKey}}`, parent[propKey]);\n      }\n    });\n  }\n\n  // has one relationship the entity name exists on the parent entity\n  if (parent && parent[`${fieldName}Id`]) {\n    variables['id'] = parent[`${fieldName}Id`];\n    url = url.replace('{id}', parent[`${fieldName}Id`]);\n  }\n\n  // Try to set the parentName + Id\n  if (parent && parent.id) {\n    variables[`${parentType.toLowerCase()}Id`] = parent.id;\n    url = url.replace(`{${parentType.toLowerCase()}Id}`, parent.id);\n  }\n\n  // Try to set from parameters\n  Object.keys(parameters).forEach(propKey => {\n    if (rawUrl.includes(`{${propKey}}`)) {\n      variables[propKey] = parameters[propKey];\n      url = url.replace(`{${propKey}}`, parameters[propKey]);\n    }\n  });\n  if (url.includes('{') || url.includes('}')) {\n    throw new Error(`Could not set all variables on url: ${rawUrl}`);\n  }\n\n  return {\n    url,\n    variables,\n  };\n}\n\napp.use(logger('dev', {\n  skip: function (req, res) { return res.statusCode < 400 }\n}))\n\napp.get('/', graphiqlExpress({ endpointURL: '/graphql' }));\n\napp.use(\n  '/graphql',\n  bodyParser.json(),\n  graphqlExpress(req => {\n    console.log('before');\n    const graphQlSchema = schemaFromMultiple([\n      {\n        swaggerJson: petStoreJson,\n        options: {\n          apiResolver: async ({\n            parent,\n            parentType,\n            parameters,\n            rawUrl,\n            fieldName,\n            type,\n          }) => {\n            const result = setRawUrl({\n              rawUrl,\n              fieldName,\n              parameters,\n              parentType,\n              parent,\n            });\n\n            console.log({\n              'type': type,\n              'parent': parent,\n              'parentType': parentType,\n              'parameters': parameters,\n              'rawUrl': rawUrl,\n              'fieldName': fieldName,\n            });\n\n            const response = await getRequest(result.url, parameters);\n            console.log(response);\n            return response;\n          }\n        },\n      }\n    ]);\n    console.log('AFTER');\n\n    console.log(graphQlSchema);\n    const schema = makeExecutableSchema(graphQlSchema);\n    return {\n      schema,\n      context: {},\n    };\n  })\n);\n\n// Catch 404 and forward to error handler\napp.use((req, res, next) => {\n  const err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// Error handler\napp.use((err, req, res) => {\n  // eslint-disable-line no-unused-vars\n  res.status(err.status || 500).render('error', {\n    message: err.message,\n  });\n});\n\nexport default app;\n"]}